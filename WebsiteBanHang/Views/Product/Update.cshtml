@model WebsiteBanHang.Models.Product

<div class="container mt-4">
    <h2 class="mb-3">Chỉnh sửa sản phẩm</h2>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
            @{
                TempData.Remove("SuccessMessage");
            }
        </div>
    }

    <form asp-controller="Product" asp-action="Update" method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="ImageUrl" />

        <div class="row">
            <div class="col-md-8">
                <div class="form-group mb-3">
                    <label asp-for="Name" class="form-label">Tên sản phẩm</label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Price" class="form-label">Giá</label>
                    <input asp-for="Price" class="form-control" />
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="Description" class="form-label">Mô tả</label>
                    <textarea asp-for="Description" class="form-control" rows="4"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="CategoryId" class="form-label">Danh mục</label>
                    <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="form-control">
                        <option value="">-- Chọn danh mục --</option>
                    </select>
                    <span asp-validation-for="CategoryId" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label d-block">Ảnh hiện tại</label>
                    <div class="current-images-gallery mb-3">
                        @if (!string.IsNullOrEmpty(Model.ImageUrl))
                        {
                            <div class="current-image-item">
                                <img src="@Model.ImageUrl" alt="Main Image" class="current-image"
                                     data-bs-toggle="modal" data-bs-target="#imageModal"
                                     onclick="showImageInModal(this.src)" />
                                <button type="button" class="btn-remove-image" onclick="markImageForDeletion(this)">
                                    <i class="fas fa-times"></i>
                                </button>
                                <input type="hidden" name="imagesToDelete" value="@Model.ImageUrl" disabled />
                            </div>
                        }
                        
                        @if (Model.ImageUrls != null && Model.ImageUrls.Any())
                        {
                            foreach (var image in Model.ImageUrls)
                            {
                                <div class="current-image-item">
                                    <img src="@image" alt="Additional Image" class="current-image"
                                         data-bs-toggle="modal" data-bs-target="#imageModal"
                                         onclick="showImageInModal(this.src)" />
                                    <button type="button" class="btn-remove-image" onclick="markImageForDeletion(this)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                    <input type="hidden" name="imagesToDelete" value="@image" disabled />
                                </div>
                            }
                        }
                        else if (string.IsNullOrEmpty(Model.ImageUrl))
                        {
                            <p class="text-muted">Chưa có ảnh</p>
                        }
                    </div>
                </div>

                <div class="form-group mb-3">
                    <label class="form-label">Chọn ảnh mới</label>
                    <input type="file" name="imageFiles" multiple class="form-control" accept="image/*" onchange="previewImages(event)" />
                    <small class="form-text text-muted">Có thể chọn nhiều ảnh cùng lúc</small>
                </div>

                <div id="imagePreviewContainer" class="mt-3">
                    <!-- Ảnh xem trước sẽ được hiển thị ở đây -->
                </div>
            </div>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-1"></i>Lưu thay đổi
            </button>
            <a asp-controller="Product" asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-times me-1"></i>Hủy
            </a>
        </div>
    </form>
</div>

<!-- Modal để xem ảnh lớn -->
<div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-body p-0">
                <button type="button" class="btn-close position-absolute top-0 end-0 m-2" 
                        data-bs-dismiss="modal" aria-label="Close"></button>
                <img id="modalImage" src="" class="w-100" alt="Product Image">
            </div>
        </div>
    </div>
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<style>
    .current-images-gallery {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .current-image-item {
        position: relative;
        width: 120px;
        height: 120px;
        overflow: hidden;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .current-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .preview-image-container {
        position: relative;
        display: inline-block;
        margin: 5px;
        width: 120px;
        height: 120px;
    }

    .preview-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .remove-preview {
        position: absolute;
        top: -8px;
        right: -8px;
        background: #dc3545;
        color: white;
        border-radius: 50%;
        padding: 4px 8px;
        cursor: pointer;
        font-size: 12px;
    }

    #modalImage {
        max-height: 80vh;
        object-fit: contain;
    }

    .btn-remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
        background: rgba(220, 53, 69, 0.9);
        color: white;
        border: none;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 12px;
        padding: 0;
        transition: all 0.2s ease;
        z-index: 2;
    }

    .btn-remove-image:hover {
        background: rgba(220, 53, 69, 1);
        transform: scale(1.1);
    }

    .image-marked-delete {
        opacity: 0.5;
        filter: grayscale(50%);
    }
</style>

<script>
    function showImageInModal(src) {
        document.getElementById('modalImage').src = src;
    }

    function previewImages(event) {
        const container = document.getElementById('imagePreviewContainer');
        container.innerHTML = ''; // Xóa preview cũ

        const files = event.target.files;
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'preview-image-container';
                    
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.className = 'preview-image';
                    img.onclick = function() {
                        showImageInModal(this.src);
                    };
                    img.setAttribute('data-bs-toggle', 'modal');
                    img.setAttribute('data-bs-target', '#imageModal');
                    
                    const removeBtn = document.createElement('span');
                    removeBtn.className = 'remove-preview';
                    removeBtn.innerHTML = '×';
                    removeBtn.onclick = function(e) {
                        e.stopPropagation();
                        div.remove();
                    };
                    
                    div.appendChild(img);
                    div.appendChild(removeBtn);
                    container.appendChild(div);
                };
                
                reader.readAsDataURL(file);
            }
        }
    }

    function markImageForDeletion(button) {
        const container = button.closest('.current-image-item');
        const img = container.querySelector('img');
        const hiddenInput = container.querySelector('input[name="imagesToDelete"]');
        
        if (img.classList.contains('image-marked-delete')) {
            img.classList.remove('image-marked-delete');
            hiddenInput.disabled = true;
        } else {
            img.classList.add('image-marked-delete');
            hiddenInput.disabled = false;
        }
    }

    // Tự động ẩn thông báo sau 3 giây
    setTimeout(function() {
        $('.alert').fadeOut('slow');
    }, 3000);
</script>
